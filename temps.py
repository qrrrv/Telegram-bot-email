import re
import time
import random
import string
import hashlib
import json 
import asyncio 
import requests
from bs4 import BeautifulSoup
from pyrogram.enums import ParseMode, ChatType
from pyrogram import Client, filters

from pyrogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton
)

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à config.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
from config import (
    API_ID,
    API_HASH,
    BOT_TOKEN
)

bot = Client(
    "bot_session",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN,
    workers=1000,
    parse_mode=ParseMode.MARKDOWN
)

# --- –ë–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –¥–∞–Ω–Ω—ã—Ö ---
STATS_FILE = 'stats.json'
STATS = {
    'total_users': 0,
    'total_emails_generated': 0,
    'total_messages_checked': 0,
    'total_new_mail_notifications': 0,
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏ ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
# –§–æ—Ä–º–∞—Ç: {token: user_id}
MONITORED_TOKENS = {}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
user_data = {} 
token_map = {} # short_id: token
user_tokens = {} # user_id: token
MAX_MESSAGE_LENGTH = 4000

BASE_URL = "https://api.mail.tm"
HEADERS = {
    "Content-Type": "application/json",
    "Accept": "application/json"
}

def load_stats():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    global STATS
    try:
        with open(STATS_FILE, 'r') as f:
            STATS.update(json.load(f))
    except (FileNotFoundError, json.JSONDecodeError):
        pass # –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

def save_stats():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ JSON —Ñ–∞–π–ª."""
    with open(STATS_FILE, 'w') as f:
        json.dump(STATS, f, indent=4)
# --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---

def short_id_generator(email):
    unique_string = email + str(time.time())
    return hashlib.md5(unique_string.encode()).hexdigest()[:10]

def generate_random_username(length=8):
    return ''.join(random.choice(string.ascii_lowercase) for i in range(length))

def generate_random_password(length=12):
    characters = string.ascii_letters + string.digits
    return ''.join(random.choice(characters) for i in range(length))

def get_domain():
    response = requests.get(f"{BASE_URL}/domains", headers=HEADERS)
    data = response.json()
    if isinstance(data, list) and data:
        return data[0]['domain']
    elif 'hydra:member' in data and data['hydra:member']:
        return data['hydra:member'][0]['domain']
    return None

def create_account(email, password):
    data = {
        "address": email,
        "password": password
    }
    response = requests.post(f"{BASE_URL}/accounts", headers=HEADERS, json=data)
    if response.status_code in [200, 201]:
        return response.json()
    else:
        return None

def get_token(email, password):
    data = {
        "address": email,
        "password": password
    }
    response = requests.post(f"{BASE_URL}/token", headers=HEADERS, json=data)
    if response.status_code == 200:
        return response.json().get('token')
    else:
        return None

def get_text_from_html(html_content_list):
    html_content = ''.join(html_content_list)
    soup = BeautifulSoup(html_content, 'html.parser')

    # –£–±–∏—Ä–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏ —Å—Ç–∏–ª–∏
    for script_or_style in soup(['script', 'style']):
        script_or_style.decompose()

    # –ó–∞–º–µ–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Markdown
    for a_tag in soup.find_all('a', href=True):
        url = a_tag['href']
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown-—Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å—Å—ã–ª–æ–∫
        new_content = f"[{a_tag.text or url}]({url})" 
        a_tag.replace_with(new_content)

    text_content = soup.get_text('\n', strip=True) # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
    # –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    cleaned_content = re.sub(r'\n\s*\n', '\n\n', text_content).strip()
    return cleaned_content

def list_messages(token):
    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json",
        "Authorization": f"Bearer {token}"
    }
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    response = requests.get(f"{BASE_URL}/messages?limit=10", headers=headers) 
    data = response.json()
    if isinstance(data, list):
        return data
    elif 'hydra:member' in data:
        return data['hydra:member']
    else:
        return []

# --- –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º ---
async def mail_monitor():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤."""
    while True:
        await asyncio.sleep(30) # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

        tokens_to_remove = []
        for token, user_id in list(MONITORED_TOKENS.items()):
            try:
                messages = list_messages(token)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                last_known_messages = user_data.get(user_id, {}).get('last_messages', [])
                
                current_message_ids = {msg['id'] for msg in messages}
                last_known_ids = {msg['id'] for msg in last_known_messages}
                
                new_message_ids = current_message_ids - last_known_ids
                
                if new_message_ids:
                    
                    new_messages = [msg for msg in messages if msg['id'] in new_message_ids]
                    
                    output = "**üîî –ù–û–í–û–ï –ü–ò–°–¨–ú–û! üîî**\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    
                    for idx, msg in enumerate(new_messages):
                        output += f"üìß –û—Ç: `{msg['from']['address']}`\n"
                        output += f"üìå –¢–µ–º–∞: `{msg['subject']}`\n"
                        output += f"üïí –í—Ä–µ–º—è: `{msg['sentDate'][:16].replace('T', ' ')}`\n"
                        output += "\n"

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    user_data.setdefault(user_id, {})['last_messages'] = messages

                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–∏—Å—å–º–∞–º
                    buttons = []
                    for msg in new_messages:
                        buttons.append(InlineKeyboardButton(f"–ß–∏—Ç–∞—Ç—å", callback_data=f"read_{msg['id']}"))
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await bot.send_message(
                        user_id, 
                        output, 
                        reply_markup=InlineKeyboardMarkup([buttons] if buttons else [])
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    STATS['total_new_mail_notifications'] += len(new_messages)
                    save_stats()

                elif 'last_messages' not in user_data.setdefault(user_id, {}):
                     # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑
                    user_data.setdefault(user_id, {})['last_messages'] = messages

            except requests.exceptions.RequestException:
                # –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏, —É–¥–∞–ª—è–µ–º –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                tokens_to_remove.append(token)
            except Exception:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
                pass
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        for token in tokens_to_remove:
            if token in MONITORED_TOKENS:
                del MONITORED_TOKENS[token]
# --- –ö–æ–Ω–µ—Ü —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ ---

@bot.on_message(filters.command('start'))
async def start(client, message):
    if message.chat.type != ChatType.PRIVATE:
        await message.reply("**–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö.**")
        return
        
    global STATS
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if message.from_user.id not in user_data:
        STATS['total_users'] += 1
        save_stats()
        user_data[message.from_user.id] = {} # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    welcome_message = (
        "**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—á—Ç—ã!** üéâ\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:\n\n"
        "‚û¢ `/tmail` - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã —Å –ø–∞—Ä–æ–ª–µ–º.\n"
        "‚û¢ `/tmail [–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]:[–ø–∞—Ä–æ–ª—å]` - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã —Å –ø–∞—Ä–æ–ª–µ–º.\n"
        "‚û¢ `/cmail [—Ç–æ–∫–µ–Ω –ø–æ—á—Ç—ã]` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∏—Å–µ–º, –∏—Å–ø–æ–ª—å–∑—É—è –≤–∞—à —Ç–æ–∫–µ–Ω –ø–æ—á—Ç—ã.\n"
        "‚û¢ `/stats` - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞.\n\n"
        "‚ú® **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ **—Ç–æ–∫–µ–Ω**. –û–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–∏—Å—å–º–∞. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ! üõ°Ô∏è"
    )
    await message.reply(welcome_message)

@bot.on_message(filters.command('tmail'))
async def generate_mail(client, message):
    if message.chat.type != ChatType.PRIVATE:
        await message.reply("**–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö.**")
        return

    loading_msg = await message.reply("**–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã...**")

    args_text = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else ""
    args = args_text.split()
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if len(args) == 1 and ':' in args[0]:
        parts = args[0].split(':', 1)
        username = parts[0]
        password = parts[1]
    else:
        username = generate_random_username()
        password = generate_random_password()

    domain = get_domain()
    if not domain:
        await message.reply("**–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–º–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞**")
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º .id
        await bot.delete_messages(message.chat.id, [loading_msg.id])
        return

    email = f"{username}@{domain}"
    account = create_account(email, password)
    if not account:
        await message.reply("**–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.**")
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º .id
        await bot.delete_messages(message.chat.id, [loading_msg.id])
        return

    time.sleep(2)

    token = get_token(email, password)
    if not token:
        await message.reply("**–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω.**")
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º .id
        await bot.delete_messages(message.chat.id, [loading_msg.id])
        return

    short_id = short_id_generator(email)
    token_map[short_id] = token
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    MONITORED_TOKENS[token] = message.from_user.id 
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    STATS['total_emails_generated'] += 1
    save_stats()

    output_message = (
        "**üìß –î–µ—Ç–∞–ª–∏ Smart-Email üìß**\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"**üìß Email:** `{email}`\n"
        f"**üîë –ü–∞—Ä–æ–ª—å:** `{password}`\n"
        f"**üîí –¢–æ–∫–µ–Ω:** `{token}`\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "**–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—á—Ç–µ. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º –≤–∫–ª—é—á–µ–Ω!**"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∏—Å—å–º–∞", callback_data=f"check_{short_id}")]])

    await message.reply(output_message, reply_markup=keyboard)
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º .id
    await bot.delete_messages(message.chat.id, [loading_msg.id]) 

@bot.on_callback_query(filters.regex(r'^check_'))
async def check_mail(client, callback_query):
    short_id = callback_query.data.split('_')[1]
    token = token_map.get(short_id)
    
    if not token:
        await callback_query.answer("**–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cmail —Å –≤–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º.**", show_alert=True)
        return

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Ç–∞–º)
    user_tokens[callback_query.from_user.id] = token
    MONITORED_TOKENS[token] = callback_query.from_user.id
    
    loading_msg = await callback_query.message.reply("**‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏—Å–µ–º... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.**")

    messages = list_messages(token)
    if not messages:
        await callback_query.answer("–ü–∏—Å–µ–º –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ ‚ùå", show_alert=True)
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º .id
        await bot.delete_messages(callback_query.message.chat.id, [loading_msg.id])
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    STATS['total_messages_checked'] += len(messages)
    save_stats()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    user_data.setdefault(callback_query.from_user.id, {})['last_messages'] = messages

    output = "**üìß –í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Smart-Mail üìß**\n"
    output += "**‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ**\n"
    
    buttons = []
    for idx, msg in enumerate(messages[:10], 1):
        output += f"{idx}. –û—Ç: `{msg['from']['address']}` - –¢–µ–º–∞: `{msg['subject']}`\n"
        button = InlineKeyboardButton(f"{idx}", callback_data=f"read_{msg['id']}")
        buttons.append(button)
    
    keyboard = []
    for i in range(0, len(buttons), 5):
        keyboard.append(buttons[i:i+5])

    await callback_query.message.reply(output, reply_markup=InlineKeyboardMarkup(keyboard))
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º .id
    await bot.delete_messages(callback_query.message.chat.id, [loading_msg.id])

@bot.on_callback_query(filters.regex(r"^close_message"))
async def close_message(client, callback_query):
    await callback_query.message.delete()

@bot.on_callback_query(filters.regex(r"^read_"))
async def read_message(client, callback_query):
    message_id = callback_query.data.split('_')[1]
    token = user_tokens.get(callback_query.from_user.id)

    if not token:
        await callback_query.answer("**–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cmail —Å –≤–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º —Å–Ω–æ–≤–∞.**", show_alert=True)
        return

    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json",
        "Authorization": f"Bearer {token}"
    }
    response = requests.get(f"{BASE_URL}/messages/{message_id}", headers=headers)

    if response.status_code == 200:
        details = response.json()

        if 'html' in details and details['html']:
            message_text = get_text_from_html(details['html'])
        elif 'text' in details and details['text']:
            message_text = details['text']
        else:
            message_text = "–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        
        # –û–±—Ä–µ–∑–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(message_text) > MAX_MESSAGE_LENGTH:
            message_text = message_text[:MAX_MESSAGE_LENGTH - 100] + "\n\n... [—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ]"

        output = f"**–û—Ç:** `{details['from']['address']}`\n**–¢–µ–º–∞:** `{details['subject']}`\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n{message_text}"

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")]
        ])

        await callback_query.message.reply(output, disable_web_page_preview=True, reply_markup=keyboard)

    else:
        await callback_query.answer("**–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è.**", show_alert=True)

@bot.on_message(filters.command('cmail'))
async def manual_check_mail(client, message):
    if message.chat.type != ChatType.PRIVATE:
        await message.reply("**–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö.**")
        return

    loading_msg = await message.reply("**‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏—Å–µ–º... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.**")

    token = message.text.split(maxsplit=1)[1].strip() if len(message.text.split()) > 1 else ""
    if not token:
        await message.reply("**–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /cmail.**")
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º .id
        await bot.delete_messages(message.chat.id, [loading_msg.id])
        return

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    user_tokens[message.from_user.id] = token
    MONITORED_TOKENS[token] = message.from_user.id
    
    messages = list_messages(token)
    if not messages:
        await message.reply("**‚ùå –ü–∏—Å–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π.**")
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º .id
        await bot.delete_messages(message.chat.id, [loading_msg.id])
        return
        
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    STATS['total_messages_checked'] += len(messages)
    save_stats()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    user_data.setdefault(message.from_user.id, {})['last_messages'] = messages

    output = "**üìß –í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Smart-Mail üìß**\n"
    output += "**‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ**\n"
    
    buttons = []
    for idx, msg in enumerate(messages[:10], 1):
        output += f"{idx}. –û—Ç: `{msg['from']['address']}` - –¢–µ–º–∞: `{msg['subject']}`\n"
        button = InlineKeyboardButton(f"{idx}", callback_data=f"read_{msg['id']}")
        buttons.append(button)

    keyboard = []
    for i in range(0, len(buttons), 5):
        keyboard.append(buttons[i:i+5])

    await message.reply(output, reply_markup=InlineKeyboardMarkup(keyboard))
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º .id
    await bot.delete_messages(message.chat.id, [loading_msg.id])

@bot.on_message(filters.command('stats'))
async def show_stats(client, message):
    if message.chat.type != ChatType.PRIVATE:
        await message.reply("**–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö.**")
        return

    stats_message = (
        "**üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Smart-Mail Bot üìä**\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"**üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ):** `{STATS['total_users']}`\n"
        f"**üìß –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ Email-–∞–¥—Ä–µ—Å–æ–≤:** `{STATS['total_emails_generated']}`\n"
        f"**üì© –ü–∏—Å–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ (–≤—Å–µ–≥–æ –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö):** `{STATS['total_messages_checked']}`\n"
        f"**üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –ø–∏—Å—å–º–∞—Ö:** `{STATS['total_new_mail_notifications']}`\n"
        f"**üì° –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ:** `{len(MONITORED_TOKENS)}`\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    )
    await message.reply(stats_message)


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
if __name__ == '__main__':
    load_stats()
    print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot.start()
    
    # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—á—Ç—ã
    asyncio.get_event_loop().create_task(mail_monitor())
    
    # –≠–¢–û –ë–õ–û–ö–ò–†–£–ï–¢ –í–´–ü–û–õ–ù–ï–ù–ò–ï –ò –£–î–ï–†–ñ–ò–í–ê–ï–¢ –ë–û–¢–ê –í –†–ê–ë–û–¢–ï
    try:
        asyncio.get_event_loop().run_forever()
    except KeyboardInterrupt:
        # –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        pass
    finally:
        bot.stop() 
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
